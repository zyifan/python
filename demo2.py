'''
1、 Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。

    在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。
    等号（=）用来给变量赋值。
    等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。
'''

counter = 100          # 整型变量
miles   = 1000.0       # 浮点型变量
name    = "runoob"     # 字符串
 
print (counter)
print (miles)
print (name)

"""
2、多个变量赋值
    Python允许你同时为多个变量赋值
"""
a = b = c = 1 #创建一个整型对象，值为1，三个变量被分配到相同的内存空间上

a, b, c = 1, 2, "runoob" #为多个对象指定多个变量

'''
3、Python3 中有六个标准的数据类型：
    Number（数字）
    String（字符串）
    List（列表）
    Tuple（元组）
    Sets（集合）
    Dictionary（字典）
'''

'''
4、Number（数字）
    Python3 支持 int、float、bool、complex（复数）。
    在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。
    像大多数语言一样，数值类型的赋值和计算都是很直观的。
    内置的 type() 函数可以用来查询变量所指的对象类型，或者用 isinstance 来判断
'''

print('-------------Number（数字）--------------------')
a, b, c, d = 20, 5.5, True, 4+3j
print(type(a), type(b), type(c), type(d))

a = 111
print(isinstance(a, int))

'''
5、isinstance 和 type 的区别在于：
    type()不会认为子类是一种父类类型。
    isinstance()会认为子类是一种父类类型。    
'''

print('-------------isinstance和type的区别--------------------')
class A:
    pass

class B(A):
    pass

print( isinstance(A(), A) )  # returns True
print( type(A()) == A )    # returns True
print( isinstance(B(), A) )  # returns True
print( type(B()) == A )       # returns False

'''
6、使用del语句删除一些对象引用
'''
var1 = 1 #当你指定一个值时，Number 对象就会被创建
var2 = 10

del var1

# print(var1) #会报错

'''
7、数值运算   
    注意：
    1、Python可以同时为多个变量赋值，如a, b = 1, 2。
    2、一个变量可以通过赋值指向不同类型的对象。
    3、数值的除法（/）总是返回一个浮点数，要获取整数使用//操作符。
    4、在混合计算时，Python会把整型转换成为浮点数。

    复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型
'''

5 + 4  # 加法 9
4.3 - 2 # 减法 2.3
3 * 7  # 乘法 21
2 / 4  # 除法，得到一个浮点数 0.5
2 // 4 # 除法，得到一个整数 0
17 % 3 # 取余 2
2 ** 5 # 乘方 32

'''
8、String（字符串）
    Python中的字符串用单引号(')或双引号(")括起来，同时使用反斜杠(\)转义特殊字符。

    字符串的截取的语法格式如下：
        变量[头下标:尾下标]

    索引值以 0 为开始值，-1 为从末尾的开始位置
    加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。

    Python 使用反斜杠(\)转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串：
    
    反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 \'''...\''' 跨越多行

    注意：
        1、反斜杠可以用来转义，使用r可以让反斜杠不发生转义。
        2、字符串可以用+运算符连接在一起，用*运算符重复。
        3、Python中的字符串有两种索引方式，从左往右以0开始，从右往左以-1开始。
        4、Python中的字符串不能改变。
'''

print('-------------String（字符串）--------------------')
str = 'Runoob'
 
print (str)          # 输出字符串
print (str[0:-1])    # 输出第一个到倒数第二个的所有字符
print (str[0])       # 输出字符串第一个字符
print (str[2:5])     # 输出从第三个开始到第五个的字符
print (str[2:])      # 输出从第三个开始的后的所有字符
print (str * 2)      # 输出字符串两次
print (str + "TEST") # 连接字符串

print('-------------(\)转义特殊字符，r表示原始字符串--------------------')
print('Ru\noob') 
print(r'Ru\noob')



'''
9、List（列表）
    列表是写在方括号([])之间、用逗号分隔开的元素列表。

    和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。

    列表截取的语法格式如下：
        变量[头下标:尾下标]

    索引值以 0 为开始值，-1 为从末尾的开始位置。

    加号（+）是列表连接运算符，星号（*）是重复操作。

    注意：
        1、List写在方括号之间，元素用逗号隔开。
        2、和字符串一样，list可以被索引和切片。
        3、List可以使用+操作符进行拼接。
        4、List中的元素是可以改变的。
'''
print('-------------List（列表）--------------------')
list = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]
tinylist = [123, 'runoob']
 
print (list)            # 输出完整列表
print (list[0])         # 输出列表第一个元素
print (list[1:3])       # 从第二个开始输出到第三个元素
print (list[2:])        # 输出从第三个元素开始的所有元素
print (tinylist * 2)    # 输出两次列表
print (list + tinylist) # 连接列表

'''
10、Tuple（元组）
    元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号(())里，元素之间用逗号隔开，元组中的元素类型也可以不相同
    元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。其实，可以把字符串看作一种特殊的元组。

    虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。
    构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则

    string、list和tuple都属于sequence（序列）。

    注意：
        1、与字符串一样，元组的元素不能修改。
        2、元组也可以被索引和切片，方法一样。
        3、注意构造包含0或1个元素的元组的特殊语法规则。
        4、元组也可以使用+操作符进行拼接。
'''
print('-------------Tuple（元组）--------------------')
tuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )
tinytuple = (123, 'runoob')
tup1 = ()    # 空元组
tup2 = (20,) # 一个元素，需要在元素后添加逗号
 
print (tuple)             # 输出完整元组
print (tuple[0])          # 输出元组的第一个元素
print (tuple[1:3])        # 输出从第二个元素开始到第三个元素
print (tuple[2:])         # 输出从第三个元素开始的所有元素
print (tinytuple * 2)     # 输出两次元组
print (tuple + tinytuple) # 连接元组

'''
Set（集合）:
    集合（set）是一个无序不重复元素的序列。

    基本功能是进行成员关系测试和删除重复元素。

    可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
'''
print('-------------Set（集合）--------------------')
 
student = {'Tom', 'Jim', 'Mary', 'Tom', 'Jack', 'Rose'}
 
print(student)   # 输出集合，重复的元素被自动去掉
 
# 成员测试
if('Rose' in student) :
    print('Rose 在集合中')
else :
    print('Rose 不在集合中')
 
 
# set可以进行集合运算
a = set('abracadabra')
b = set('alacazam')
 
print(a)
print(b)
 
print(a - b)     # a和b的差集
 
print(a | b)     # a和b的并集
 
print(a & b)     # a和b的交集
 
print(a ^ b)     # a和b中不同时存在的元素

'''
Dictionary（字典）（对象）:
    字典（dictionary）是Python中另一个非常有用的内置数据类型。

    列表是有序的对象结合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。

    字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。

    键(key)必须使用不可变类型。

    在同一个字典中，键(key)必须是唯一的

    注意：
        1、字典是一种映射类型，它的元素是键值对。
        2、字典的关键字必须为不可变类型，且不能重复。
        3、创建空字典使用 { }。
'''
print('-------------Dictionary（字典）--------------------')

dict = {}
dict['one'] = "1 - 菜鸟教程"
dict[2]     = "2 - 菜鸟工具"
 
tinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}
 
 
print (dict['one'])       # 输出键为 'one' 的值
print (dict[2])           # 输出键为 2 的值
print (tinydict)          # 输出完整的字典
print (tinydict.keys())   # 输出所有键
print (tinydict.values()) # 输出所有值

print('------------------构造函数 dict() 可以直接从键值对序列中构建字典----------------------')
dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)]) # {'Taobao': 3, 'Runoob': 1, 'Google': 2}
 
{x: x**2 for x in (2, 4, 6)} #{2: 4, 4: 16, 6: 36}
 
dict(Runoob=1, Google=2, Taobao=3) #{'Taobao': 3, 'Runoob': 1, 'Google': 2}

'''
    Python数据类型转换:
        有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。
        以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。

        函数	                    描述
        int(x [,base])          将x转换为一个整数
        float(x)                将x转换到一个浮点数
        complex(real [,imag])   创建一个复数
        str(x)                  将对象 x 转换为字符串
        repr(x)                 将对象 x 转换为表达式字符串
        eval(str)               用来计算在字符串中的有效Python表达式,并返回一个对象
        tuple(s)                将序列 s 转换为一个元组
        list(s)                 将序列 s 转换为一个列表
        set(s)                  转换为可变集合
        dict(d)                 创建一个字典。d 必须是一个序列 (key,value)元组。
        frozenset(s)            转换为不可变集合
        chr(x)                  将一个整数转换为一个字符
        ord(x)                  将一个字符转换为它的整数值
        hex(x)                  将一个整数转换为一个十六进制字符串
        oct(x)                  将一个整数转换为一个八进制字符串
'''