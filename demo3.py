'''
1、 Python位运算符

    运算符	            描述	                                                                                        实例
    &	        按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	                 (a & b) 输出结果 12 ，二进制解释： 0000 1100
    |	        按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	                                 (a | b) 输出结果 61 ，二进制解释： 0011 1101
    ^	        按位异或运算符：当两对应的二进位相异时，结果为1	                                          (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
    ~	        按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1	                (~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。
    <<	        左移动运算符：运算数的各二进位全部左移若干位，由"<<"右边的数指定移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
    >>	        右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，">>"右边的数指定移动的位数	          a >> 2 输出结果 15 ，二进制解释： 0000 1111
'''

a = 60            # 60 = 0011 1100 
b = 13            # 13 = 0000 1101 
c = 0
 
c = a & b;        # 12 = 0000 1100
print ("1 - c 的值为：", c)
 
c = a | b;        # 61 = 0011 1101 
print ("2 - c 的值为：", c)
 
c = a ^ b;        # 49 = 0011 0001
print ("3 - c 的值为：", c)
 
c = ~a;           # -61 = 1100 0011
print ("4 - c 的值为：", c)
 
c = a << 2;       # 240 = 1111 0000
print ("5 - c 的值为：", c)
 
c = a >> 2;       # 15 = 0000 1111
print ("6 - c 的值为：", c)

'''
Python身份运算符:身份运算符用于比较两个对象的存储单元
    is:
        is 是判断两个标识符是不是引用自一个对象,x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False
    is not:
        is not 是判断两个标识符是不是引用自不同对象	x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。

    注： id() 函数用于获取对象内存地址。
'''
print('---------------------Python身份运算符is、is not-----------------------------');

a = 20
b = 20
 
if ( a is b ):
   print ("1 - a 和 b 有相同的标识")
else:
   print ("1 - a 和 b 没有相同的标识")
 
if ( id(a) == id(b) ):
   print ("2 - a 和 b 有相同的标识")
else:
   print ("2 - a 和 b 没有相同的标识")
 
# 修改变量 b 的值
b = 30
if ( a is b ):
   print ("3 - a 和 b 有相同的标识")
else:
   print ("3 - a 和 b 没有相同的标识")
 
if ( a is not b ):
   print ("4 - a 和 b 没有相同的标识")
else:
   print ("4 - a 和 b 有相同的标识")

'''
is 与 == 区别：is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。
'''
print('---------------------is 与 == 区别-----------------------------');

a = [1, 2, 3]
b = a
b is a #True
b == a # True
b = a[:]
b is a # False
b == a # True

'''
Python运算符优先级:
    以下表格列出了从最高到最低优先级的所有运算符：

    运算符	                              描述
    **	                            指数 (最高优先级)
    ~ + -	                        按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
    * / % //	                    乘，除，取模和取整除
    + -	                            加法减法
    >> <<	                        右移，左移运算符
    &	                            位 'AND'
    ^ |	                            位运算符
    <= < > >=	                    比较运算符
    <> == !=	                    等于运算符
    = %= /= //= -= += *= **=	    赋值运算符
    is is not	                    身份运算符
    in not in	                    成员运算符
    not or and	                    逻辑运算符

'''